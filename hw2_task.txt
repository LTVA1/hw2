Объявление всех функций должно быть в файле hw1.h, а реализация - hw1.cpp

написать класс, в котором реализованы функции дилотации и эрозии и другие, при необходимости, вспомогательные функции.

struct Img {
    int* srcImg;
    int width;
    int height;

    Img();
    Img(int w, int h);
    Img( const int* src, int w, int h);
    ~Img();
};

class ImageProcess {
private :
    Img* srcImg;
	Img* processedImg;
    Img* mask;
    //здесь можно объявлять другие переменные и функции
public :
    //здесь нельзя объявлять функции и переменные
	/**/
    ImageProcess();
	/* выделяется память для картинки размера w*h */
    ImageProcess(int w, int h);
	/* выделяется память для картинки размера w*h и копируется картинка*/
    ImageProcess(const Img* img);
	/* выделяется память для картинки копируется картинка из файла*/
    ImageProcess(const char* fileName);
    ~ImageProcess();

	/*задание маски*/
    int updateMask(const Img& mask);
	/*перезаписать исходную картинку картинкой, которая была получена в результате дилотации и/или эрозии*/
	int updateSrcImg();	
	/*дилотация картинки, результат записать в processedImg*/
    int dilotation();
	/*эрозия картинки, результат записать в processedImg*/
    int erosion();
	/*
		загрузить/сохранить из файла с имененм fileName картинку
		input		:	fileName - имя файла
						format - формат файла 	0 - последовательность 0 и 1, без перехода на новую строку
												1 - последовательность 0 и 1, с переходом на новую строку 
	*/
	int loadImgFromFile(const char* fileName, int format = 1);
	int saveImgToFile(const char* fileName, int format = 1);
};

в файле в первой строчке хранится ширина и высота картинки, разделённые знаком \t
пример файла формат "0"
10\t10\n
0000000000000000000000000001000000000001011000000000100000000000001010111111111100000000000000000000\n

пример файла формат "1"
10	10\n
0000000000\n
0000000000\n
0000000100\n
0000000001\n
0110000000\n
0010000000\n
0000001010\n
1111111111\n
0000000000\n
0000000000\n
